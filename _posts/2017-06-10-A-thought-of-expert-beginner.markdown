---
layout: post
title: Expert Beginner에 대한 단상
date: 2018-06-10 19:00:00 +0900
description: # Add post description (optional)
img: path-to-expert.png # Add image post (optional)
tags: [Expert Beginnger] # add tag
---

> 오늘은 주중에 읽었던 글 중에 큰 깨달음(!)을 얻게 된 글을 소개하고, 그 글에 대한 짧은 생각을 적어보고자 합니다.

들어가기 앞서 먼저 이 글을 읽고오셨으면 좋겠습니다. 그 후에 제가 느낀바를 읽어보시며 무엇에 동감하셨고 무엇에 동의할 수 없으신지 생각해 보셔도 좋고, 아니면 저에게 직접 말씀해 주셔도 좋습니다. 특히 민감하고 또 민감한 주제이니, 정말 조심스럽게 글을 작성해보고자 합니다.

[[번역]더 이상 배우려 하지 않는 개발자 : Expert Beginner의 등장](https://medium.com/@jwyeom63/%EB%8D%94-%EC%9D%B4%EC%83%81-%EB%B0%B0%EC%9A%B0%EB%A0%A4-%ED%95%98%EC%A7%80-%EC%95%8A%EB%8A%94-%EA%B0%9C%EB%B0%9C%EC%9E%90-expert-beginner%EC%9D%98-%EB%93%B1%EC%9E%A5-dd40c40aeedf)

## 1. 성장이란

훌륭한 개발자가 되는것은 **거의** 모든 개발자들의 목표라고 생각합니다. 거의 모든 경우에 있어서, 훌륭한 개발자가 되었을때 뒤따르는 보상들은 그렇지 않았을때 보다 훨씬 달콤합니다(물론 다른 케이스도 얼마든지 존재할 수 있습니다). 주변 사람들의 인정, 금전적인 소득, 자신에 대한 성취욕구 달성 등등. 아마 그렇기 때문에 전 세계에서 대부분의 개발자들이 지금 이 시간에도 `글또`들 처럼 글도 쓰고, 따로 연구도하고, 개인 프로젝트를 망쳐도 보고, 독서도 하는 등 부단하게 노력하고 있을 것입니다.

개발자의 성장은 `자기 자신의 상태에 만족`할때 멈춘다고 생각합니다. 성장이 멈춘 이들은 아마 자신이 무엇이 부족한지도 모른채 시간을 보낼 것 입니다. 부족함을 느끼지 못한다면 성장에 대한 이유를 찾을 수 없기 때문입니다. 위의 글에서도 써있지만 그런 사람들은 하나의 회사에 정착해 흔히 말하는 `고인물`이 되어 자신과 생각이 다른 사람을 배척하기 시작합니다. 심지어 그들은 자신에 대한 근거없는 신념과 강한 고집으로 인하여 협업하는 사람들 힘들게 만들수도 있습니다.

그렇기 때문에 저는 이 세계에서 업종에 종사한 햇수, 이른바 `연차`는 그 사람의 실력을 평가하는데에 큰 영향을 주지 못한다고 생각합니다. "1년 밖에 되지않은 놈이 무슨 건방진 소리냐"라고 하실수도 있지만 저는 강하게 확신합니다. 10년이 넘게 자바를 사용했지만 jar 포맷으로 compile하지 못하는 사람도 있고, 오랜 기간 IE와 크롬간의 cross browsing문제는 잘 해결하지만 이 문제가 왜 발생하는지 모르는사람도 있고, Fullstack developer라고 자신을 소개했지만 JS의 closure에서 파생할수있는 문제를 예측하지 못하는 사람도 보았습니다.

물론 이 문제들이 100% 본인의 잘못만은 `절대` 아닙니다. 덧붙여, 제가 저 분들보다 많은 것을 알고 개발을 잘 하는것도 아닙니다.

## 2. Expert Beginner로 이탈해버리는 원인

그렇다면 저런일들이 발생하는 이유는 무엇일까요? 제가 생각하는 이유를, 그 동안 들었던 많은 조언과 개인의 경험들을 종합해서 정리해 보았습니다.

1. Feedback이 부실하거나 없다.  

    정말 중요한 이유라고 생각합니다. 특히 저 같이 개발을 시작한지 얼마 되지 않은 사람들에게는 더욱요. 저는 이것에 대해 이야기할 때 흔히 계단을 올라가는 일에 비유합니다.  

    대다수의 개발자가 처음 개발을 시작하면 1층을 빙빙 돌게 됩니다. 1층에서 땅도 파보고, 나무도 집도 지어보고, 때로는 내가 파 놓은 땅에 빠지기도하는 등 여러가지 경험을 하게 됩니다. 이 과정에서 나름의 교훈을 얻고 약간의 성장을 하게 됩니다.  

    어느날, 누군가가 나타나 1층에서 재미있게 놀고있던 아기 개발자에게 `2층`의 존재를 알려줍니다. 그 사실을 알게 된 아기 개발자는 2층으로 가는 계단을 찾기위해 노력하게 됩니다. 많은 역경을 극복하고 기어이 2층에 올라선 아기 개발자는 더 넓은 2층이라는 공간에 기뻐하며, 1층에서 놀았듯이 다시 많은 경험을 쌓으러 갑니다. 이번에는 좀 더 쉽습니다. 1층에서의 경험이 있었기 때문에 개발자는 좀 더 쉽게 놀 수 있습니다. 물론 아직은 스스로 위층으로 올라가는 계단을 찾는것이 힘들지만요.  

    이렇게 시간을 보내며, 자신에게 들어오는 feedback을 수용하여 한계단씩 올라가던 아기 개발자는 문득 자신이 높은 층에 올라왔음을 인지합니다. 그리고는 아래층을 향해 외치게 됩니다. `"위로 가는 계단이 있어!"`  

    하지만, 만약 이 아기 개발자가 2층의 존재를 몰랐다면 어땠을까요? 아마 더 오랜 시간이 지난 후에야 2층의 존재를 알았을거고, 어쩌면 평생 1층에서만 지내다가 개발자로서의 커리어를 마감했을 지도 모릅니다.  

    그렇기 때문에, 개발자에 있어 다른 개발자의 feedback은 **정말 중요**하다고 생각합니다. 특히 아무것도 모르는 시절에는 개발자의 성장에 있어 direction을 설정하는 것은 정말 중요한 일이라고 생각합니다. 이러한 feedback은 많은 형태로 얻을 수 있습니다. 대표적인 방법으로 `코드 리뷰`가 있습니다. 다양한 문제 해결 방법과 좋은 패턴을 익히는데에는 이것만한 것이 없다고 생각합니다. 또는 다른 `개발자와의 교류`가 있습니다. 특이하게도 대한민국에서는 코드리뷰를 진행하는 곳이 생각보다 없다고 합니다. 이런 환경에서 자신이 개발하고 있다면 커뮤니티 활동을 활발히 하는 것이 도움이 된다고 생각합니다.  

    그렇기 때문에, 다음과 같은 태도는 개인적으로 지양해야한다고 봅니다.  
          - '개발자는 알아서 성장하는거야'라고 말하며 최소한의 direction guide도 해주지 않는 동료.  
          - 계단을 올라가는 방법까지 알려주길 바라는 태도.  
          - Feedback을 바라면서 남들에 대한 feedback은 무성의한 태도.  
          - 정당한 feedback에 일단 강하게 거부감을 표시하는 태도.  

2. 현재 자신이 쓰고있는 언어나 Framework, Library에 지나치게 의존한다.  
    
    정말 믿을 수 없지만 개발자를 채용하고나서 종종 있는 일이라고 합니다.  
    
    `React만 해봐서 Vue로는 못하겠는데요?`  

    충격과 공포스럽지만 제 동료가 실제로 겪은 일이라고 합니다.  
    생각보다 많은 분들이 언어를 도구로서 여기지 않고 있는 것 같습니다. 개인적으로 언어는 `수단`이지 절대 `목적`이 아니라고 생각합니다. 그래서 개발자에게 `장인은 도구를 탓하지 않는다`라는 속담은 잘 어울리지 않습니다. 오히려 개발자는 `목적을 이루기 위한 가장 효율적인 도구`를 고를 줄 알아야 합니다. 그렇기 때문에 개발자는 어떠한 `목적`을 이루기 위해서 익숙한 도구를 내려놓는 것에 대해 거부감이 없어야 한다고 봅니다.  

    개발자가 일하게 되는 환경(특히 web 개발)은 정말 가지각색의 행성과도 같습니다. 회사마다 다양한 기술 스택을 사용하고 있죠. php, java spring, React + Django, Angular + nodejs... 여기에 인프라의 특성까지 합하게 되면 정말 무궁무진한 조합이 나오게 됩니다. 어느 한 Framework나 Library에 지나치게 의존을 하거나 고집을 부리게 되면 살수 있는 행성이 그 만큼 줄어 듭니다.  

    또 한가지 이유는 언어, Framework, Library의 생명주기 입니다. 어느날 갑자기 Dan Abramov가 트위터에 `"React는 처음부터 잘못되었다. 나는 React를 믿지 않는다."`라고 말한다 상상해 보세요. 그래도 React를 붙잡고 계실건가요? 굳건하기만 했던 jQuery의 아성이 조금씩 흔들리고 있다는 것에 대해 어떻게 생각하시나요? 지금에 와서 php CodeIgniter를 배우는것이 의미가 있을까요? 현재 자신이 잘 사용하고 있는 모든것들은 언젠가 사라질 수도 있다고 생각해야합니다. 그렇게 생각하면 할수록, 언어나 Framework, Library의 구속에서 벗어날 수 있습니다.  

    특정 업계를 벗어날 생각이 없으시다면(한국의 경우에는 SI라는 적절한 예시가 있겠네요) 하나의 언어, 하나의 Framework에 의존하셔도 좋습니다. 오히려 이 경우에는 하나만 해야하는 것이 맞을 수도 있습니다. 20년 가까이 SI 업계 에서는 거의 java spring(egov 같은) + jQuery만 사용하고 있으니까요. 하지만 그렇지 않으시다면 언어, Framework, Library에 대해 열린 사고를 하시길 추천드립니다.

3. 근거는 없지만 내가 잘하고 있다는 생각을 한다.  

    이 것이야말로 제일 위험한 타입이라고 생각합니다. 나는 처음부터 잘했고, 지금도 잘 하고 있고, 앞으로도 잘 할것이라는 근거없는 믿음과 함께하는 사람이죠. 다만 이런 생각을 하게 된데에는 1번의 경우와 조금 겹치게 됩니다. 바로 긍정적인 feedback만 많이 받았을 가능성입니다.  

    개인적으로 '잘 한다'라는 말은 반복할 수록 별 도움이 안되는 feedback이라고 생각합니다(그렇다고 동료에게 '넌 항상 부족하고 못하는것 같아!' 이런식으로 feedback을 하라는 말이 아닙니다). 물론 적절한 순간의 적절한 칭찬은 motivation과 용기를 주지만 `무엇을 잘 했는지`에 대한 확실한 **정의**가 없다면 의미가 사라집니다. 특히 스스로의 나태함에 대해 경계하고 있지 않다면 자신의 실력과 관계없이 자신이 잘 한다고 생각하게될 확률이 높습니다.  

    그렇기 때문에 동료에게 feedback을 줄 때는 `사실`에 근거한 담백함이 있어야 한다고 봅니다. '잘 한다'라는 말은 마치 `wild card`처럼 남겨놓는 것이죠.  

## 3. 결론

요새 나태한 생각이 들때마다 `"Expert Beginner!!"`라는 단어를 떠올립니다. 이 단어만큼 요새의 저를 자극하는 말이 없습니다(덧붙여 `"주니어 치고는 잘했어."`도 있습니다. ~~적고보니 갑자기 화가 나네요~~).  

개발자에게 있어 성장의 정체라는 것은 정말 고통스럽고 답답한 고치 입니다. 결국 이런 고치를 벗어나 날아갈 수 있는 방법은 개인의 노력과 좋은 동료라고 생각합니다. 반드시 비중을 정해야 한다면 `좋은 동료`에 조금 더 비중을 두고 싶습니다. 저 역시 글을 올리고, 댓글을 확인하고 때로는 직접적인 feedback을 받으며 성장하고 있으니까요. 내일 당장 출근을 하셔서 주변 동료들과 `Expert Beginner`에 대해 이야기 해보시면 어떨까요?
